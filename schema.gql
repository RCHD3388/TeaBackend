# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @upper on FIELD_DEFINITION

type Person {
  name: String!
  email: String!
  phone_number: String!
  address: String!
}

type CategoryData {
  _id: ID!
  name: String!
  description: String
  type: String!
}

type AttendanceDetail {
  employee: Employee!
  check_in: Boolean!
  check_out: Boolean!
  note: String!
}

type Attendance {
  date: DateTime!
  description: String!
  created_by: Employee!
  attendance_detail: [AttendanceDetail!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ProjectClosing {
  closed_by: Employee!
  note: String
  status: CategoryData!
  document: String
}

type Project {
  _id: String!
  name: String!
  location: String!
  description: String!
  createdAt: DateTime!
  finished_at: DateTime
  target_date: DateTime
  priority: CategoryData!
  status: CategoryData!
  project_leader: Employee!
  worker: [Employee!]!
  attendace: [Attendance!]!
  project_closing: ProjectClosing
}

type EmployeeProjectHistory {
  project: String!
  join_at: DateTime!
  left_at: DateTime
  description: String!
}

type EmployeeRole {
  _id: String!
  name: String!
  description: String!
}

type EmployeeSkill {
  _id: String!
  name: String!
  description: String!
}

type Employee {
  _id: String!
  person: Person!
  hire_date: DateTime!
  salary: Float
  status: String!
  role: EmployeeRole!
  project_history: [EmployeeProjectHistory!]!
  skill: [EmployeeSkill!]!
}

type User {
  _id: String!
  username: String!
  status: String!
  employee: Employee!
}

type LoginResponse {
  username: String!
  role: String!
  access_token: String!
  name: String!
}

type MaterialTransaction {
  name: String!
}

type ToolTransaction {
  name: String!
}

type Warehouse {
  _id: String!
  name: String!
  description: String
  type: String!
  project: Project
  address: String!
  status: String!
  material_transaction: [MaterialTransaction!]!
  tool_transaction: [ToolTransaction!]!
}

type GetAllProjectEmployeeDto {
  registered: [Employee!]!
  unregistered: [Employee!]
}

type Supplier {
  _id: String!
  name: String!
  person: Person!
  status: String!
}

type UnitMeasure {
  _id: ID!
  name: String!
  description: String
}

type Merk {
  _id: ID!
  name: String!
  description: String
}

type Sku {
  _id: ID!
  name: String!
  description: String
  merk: Merk!
  item_category: CategoryData!
}

type Material {
  _id: ID!
  id: String!
  name: String!
  description: String
  merk: Merk!
  unit_measure: UnitMeasure!
  status: String!
  minimum_unit_measure: UnitMeasure!
  conversion: Float!
  item_category: CategoryData!
}

type Query {
  getHello: String!
  getAllUsers: [User!]!
  getUserById(id: String!): User!
  findAllProjects: [Project!]!
  findProjectById(id: String!): Project!
  getAllProjectEmployees(id: String!): GetAllProjectEmployeeDto!
  getAllEmployees(employeeFilter: EmployeeFilter): [Employee!]!
  getEmployeeById(id: String!): Employee!
  getAllRole: [EmployeeRole!]!
  getAllSkill: [EmployeeSkill!]!
  getAllSuppliers: [Supplier!]!
  getSupplierById(id: String!): Supplier!
  getAllWarehouses: [Warehouse!]!
  getWarehouseById(id: String!): Warehouse!
  getAllUnitMeasures: [UnitMeasure!]!
  getUnitMeasureById(id: String!): UnitMeasure!
  getAllMerks: [Merk!]!
  getMerkById(id: String!): Merk!
  getAllMaterials: [Material!]!
  getMaterialById(id: String!): Material!
  getAllSkus: [Sku!]!
  getSkuById(id: String!): Sku!
  getCategories(categoryFilter: CategoryFilter): [CategoryData!]!
}

input EmployeeFilter {
  filter: [String!]
  status: Boolean
}

input CategoryFilter {
  filter: [String!]
}

type Mutation {
  login(data: LoginInput!): LoginResponse!
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(id: String!, updateUserInput: UpdateUserInput!): User!
  updateUserPassword(id: String!, password: String!): User!
  deleteUserPassword(id: String!): User!
  createProject(createProjectInput: CreateProjectInput!): Project!
  updateProject(id: String!, updateProjectInput: UpdateProjectInput!): Project!
  addNewProjectEmployee(id: String!, employees: [String!]!): [Employee!]!
  removeProjectEmployee(id: String!, employee: String!, description: String!): Employee!
  createEmployee(createEmployeeInput: CreateEmployeeInput!): Employee!
  updateEmployee(id: String!, updateEmployeeInput: UpdateEmployeeInput!): Employee!
  createEmployeeSkill(createEmployeeSkillInput: CreateEmployeeSkillInput!): EmployeeSkill!
  updateEmployeeSkill(id: String!, updateEmployeeSkillInput: CreateEmployeeSkillInput!): EmployeeSkill!
  deleteEmployeeSkill(id: String!): EmployeeSkill!
  createSupplier(createSupplierInput: CreateSupplierInput!): Supplier!
  updateSupplier(id: String!, updateSupplierInput: UpdateSupplierInput!): Supplier!
  createWarehouse(createWarehouseInput: CreateWarehouseInput!): Warehouse!
  updateWarehouse(id: String!, updateWarehouseInput: UpdateWarehouseInput!): Warehouse!
  createUnitMeasure(createInventoryCategoryInput: CreateInventoryCategoryInput!): UnitMeasure!
  updateUnitMeasure(id: String!, updateInventoryCategoryInput: UpdateInventoryCategoryInput!): UnitMeasure!
  deleteUnitMeasure(id: String!): UnitMeasure!
  createMerk(createInventoryCategoryInput: CreateInventoryCategoryInput!): Merk!
  updateMerk(id: String!, updateInventoryCategoryInput: UpdateInventoryCategoryInput!): Merk!
  deleteMerk(id: String!): Merk!
  createMaterial(createMaterialInput: CreateMaterialInput!): Material!
  updateMaterial(id: String!, updateMaterialInput: UpdateMaterialInput!): Material!
  createSku(createSkuInput: CreateSkuInput!): Sku!
  updateSku(id: String!, updateSkuInput: UpdateSkuInput!): Sku!
  createCategory(createCategoryInput: CreateCategoryInput!): CategoryData!
  updateCategory(id: String!, updateCategoryInput: UpdateCategoryInput!): CategoryData!
  deleteCategory(id: String!): CategoryData!
}

input LoginInput {
  username: String!
  password: String!
}

input CreateUserInput {
  username: String!
  password: String!
  employee: String!
}

input UpdateUserInput {
  username: String
  status: String
}

input CreateProjectInput {
  name: String!
  location: String!
  description: String
  target_date: DateTime
  priority: String!
  status: String!
  project_leader: String!
}

input UpdateProjectInput {
  name: String
  location: String
  description: String
  target_date: DateTime
  priority: String
  status: String
  project_leader: String
}

input CreateEmployeeInput {
  person: PersonInput!
  hire_date: String!
  salary: Float!
  status: String!
  role: String!
  skill: String!
}

input PersonInput {
  name: String!
  email: String!
  phone_number: String!
  address: String!
}

input UpdateEmployeeInput {
  name: String
  email: String
  phone_number: String
  address: String
  status: String
  salary: Float
  hire_date: String
  skills: [String!]
  role: String
}

input CreateEmployeeSkillInput {
  name: String!
  description: String!
}

input CreateSupplierInput {
  name: String!
  person: PersonInput!
  status: String!
}

input UpdateSupplierInput {
  company_name: String
  name: String
  email: String
  phone_number: String
  address: String
  status: String
}

input CreateWarehouseInput {
  name: String!
  description: String
  project: String
  address: String!
  status: String
}

input UpdateWarehouseInput {
  name: String
  description: String
  address: String
  status: String
}

input CreateInventoryCategoryInput {
  name: String!
  description: String
}

input UpdateInventoryCategoryInput {
  name: String
  description: String
}

input CreateMaterialInput {
  name: String!
  description: String
  merk: String!
  unit_measure: String!
  status: String!
  minimum_unit_measure: String!
  conversion: Float!
  item_category: String!
}

input UpdateMaterialInput {
  name: String!
  description: String
  merk: String!
  unit_measure: String!
  status: String!
  minimum_unit_measure: String!
  conversion: Float!
  item_category: String!
}

input CreateSkuInput {
  name: String!
  description: String
  merk: String!
  item_category: String!
}

input UpdateSkuInput {
  name: String
  description: String
  merk: String
  item_category: String!
}

input CreateCategoryInput {
  name: String!
  description: String
  type: String!
}

input UpdateCategoryInput {
  name: String
  description: String
}